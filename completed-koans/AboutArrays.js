// Generated by CoffeeScript 1.8.0
(function() {
  var FILL_ME_IN, should;

  should = require('chai').should();

  FILL_ME_IN = 'Fill this value in';

  describe('About Arrays', function() {
    describe('for easier array functionality', function() {
      it('should create an array', function() {
        var emptyArray;
        emptyArray = [];
        (typeof emptyArray).should.equal('object');
        return emptyArray.should.have.length(0);
      });
      it('should understand array literals', function() {
        var array;
        array = [];
        array.should.deep.equal([]);
        array[0] = 1;
        array.should.deep.equal([1]);
        array[1] = 2;
        array.should.deep.equal([1, 2]);
        array.push(3);
        return array.should.deep.equal([1, 2, 3]);
      });
      it('should understand array length', function() {
        var fourNumberArray, tenEmptyElementArray;
        fourNumberArray = [1, 2, 3, 4];
        fourNumberArray.should.have.length(4);
        fourNumberArray.push(5, 6);
        fourNumberArray.should.have.length(6);
        tenEmptyElementArray = new Array(10);
        tenEmptyElementArray.should.have.length(10);
        tenEmptyElementArray.length = 5;
        return tenEmptyElementArray.should.have.length(5);
      });
      return it('should understand multitype arrays', function() {
        var multiTypeArray;
        multiTypeArray = [
          0, 1, 'two', function() {
            return 3;
          }, {
            value1: 4,
            value2: 5
          }, [6, 7]
        ];
        multiTypeArray[0].should.equal(0);
        multiTypeArray[2].should.equal('two');
        multiTypeArray[3]().should.equal(3);
        multiTypeArray[4].value1.should.equal(4);
        return multiTypeArray[5][0].should.equal(6);
      });
    });
    return describe('for more complex array functions', function() {
      it('should understand array ranges', function() {
        var range, sdrawkcab;
        range = [1, 2, 3, 4, 5];
        range.should.deep.equal([1, 2, 3, 4, 5]);
        sdrawkcab = [3, 2, 1];
        return sdrawkcab.should.deep.equal([3, 2, 1]);
      });
      it('should understand array comprehension', function() {
        var accumulator, array, element, _i, _len;
        array = [1, 2, 3];
        accumulator = 0;
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          element = array[_i];
          accumulator += element;
        }
        return accumulator.should.deep.equal(6);
      });
      it('should understand a more compact array comprehension', function() {
        var accumulator, array, element, _i, _len;
        array = [1, 2, 3];
        accumulator = 1;
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          element = array[_i];
          accumulator += element;
        }
        return accumulator.should.equal(7);
      });
      it('should slice arrays', function() {
        var array;
        array = ['peanut', 'butter', 'and', 'jelly'];
        array.slice(0, 1).should.deep.equal(['peanut']);
        array.slice(0, 2).should.deep.equal(['peanut', 'butter']);
        array.slice(2, 2).should.deep.equal([]);
        array.slice(2).should.deep.equal(['and', 'jelly']);
        array.slice(2, 20).should.deep.equal(['and', 'jelly']);
        array.slice(3, 0).should.deep.equal([]);
        array.slice(3, 100).should.deep.equal(['jelly']);
        return array.slice(5, 1).should.deep.equal([]);
      });
      it('should understand range slicing', function() {
        var firstTwo, myString, oneToTen;
        oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        oneToTen.slice(3, 6).should.deep.equal([4, 5, 6]);
        myString = 'my string'.slice(0, 3);
        myString.should.equal('my ');
        firstTwo = ['one', 'two', 'three'];
        return firstTwo.slice(0, 2).should.deep.equal(['one', 'two']);
      });
      it('should understand array references', function() {
        var array, assignedArray, copyOfArray, passedByReference;
        array = ['zero', 'one', 'two', 'three', 'four', 'five'];
        passedByReference = function(refArray) {
          return refArray[1] = 'changed in function';
        };
        passedByReference(array);
        array[1].should.equal('changed in function');
        assignedArray = array;
        assignedArray[5] = 'changed in assignedArray';
        array[5].should.equal('changed in assignedArray');
        copyOfArray = array.slice();
        copyOfArray[3] = 'changed in copyOfArray';
        return array[3].should.equal('three');
      });
      it('should push and pop', function() {
        var array, poppedValue;
        array = [1, 2];
        array.push('weasel');
        array.should.deep.equal([1, 2, 'weasel']);
        poppedValue = array.pop();
        poppedValue.should.equal('weasel');
        return array.should.deep.equal([1, 2]);
      });
      return it('should shift arrays', function() {
        var array, shiftedValue;
        array = [1, 2];
        array.unshift(3);
        array.should.deep.equal([3, 1, 2]);
        shiftedValue = array.shift();
        shiftedValue.should.equal(3);
        return array.should.deep.equal([1, 2]);
      });
    });
  });

}).call(this);
